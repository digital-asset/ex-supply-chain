--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.Scenarios where

import DA.Date
import DA.Assert

import DA.RefApps.SupplyChain.Relationship
import DA.RefApps.SupplyChain.Types
import DA.RefApps.SupplyChain.Delivery
import DA.RefApps.SupplyChain.Inventory
import DA.RefApps.SupplyChain.Quote
import DA.RefApps.SupplyChain.QuoteRequest
import DA.RefApps.SupplyChain.Aggregate
import DA.RefApps.SupplyChain.Order

data SetupData = SetupData with
    buyerRoleCid: ContractId BuyerSellerRelationship
    product01: OrderedProduct
    product02: OrderedProduct
    inventoryW1P1Cid: ContractId InventoryItem
    inventoryW1P2Cid: ContractId InventoryItem
    inventoryW2P1Cid: ContractId InventoryItem
    inventoryW2P2Cid: ContractId InventoryItem

-- Setup scenario to prepare the relationships and inventory
setup : Scenario SetupData
setup = scenario do
  buyer <- getParty "Buyer"
  seller <- getParty "Seller"
  supplier <- getParty "Supplier"
  warehouse1 <- getParty "Warehouse1"
  warehouse2 <- getParty "Warehouse2"
  transportComp1 <- getParty "TransportCompany1"
  transportComp2 <- getParty "TransportCompany2"

  -- Predefined data
  let
    product01 = OrderedProduct "Product 1" 100 (date 2019 Dec 1) (date 2019 Dec 10)
    product02 = OrderedProduct "Product 2" 10 (date 2019 Dec 10) (date 2019 Dec 14)
    buyerAddress = "1234, Vice City, Arkham street 13"

  -- Market setup
  buyerSellerRelInvitation <- submit buyer do
    create $ BuyerSellerRelationshipInvitation buyer buyerAddress seller
  buyerRole <- submit seller do
    exercise buyerSellerRelInvitation BuyerSellerRelationshipInvitation_Accept

  inventoryW1P1Cid <- submit warehouse1 do
    create InventoryItem
      with
        warehouse = warehouse1
        supplier = supplier
        productName = product01.productName
        quantity = 50
        unitPrice = 55.0
  inventoryW1P2Cid <- submit warehouse1 do
    create InventoryItem
      with
        warehouse = warehouse1
        supplier = supplier
        productName = product02.productName
        quantity = 100
        unitPrice = 60.0

  inventoryW2P1Cid <- submit warehouse2 do
    create InventoryItem
      with
        warehouse = warehouse2
        supplier = supplier
        productName = product01.productName
        quantity = 200
        unitPrice = 58.0
  inventoryW2P2Cid <- submit warehouse2 do
    create InventoryItem
      with
        warehouse = warehouse2
        supplier = supplier
        productName = product02.productName
        quantity = 100
        unitPrice = 65.0

  passToDate $ date 2019 Jun 3

  return SetupData with
    buyerRoleCid = buyerRole, ..

-- Scenario to walk through the complete happy path of this supply chain ref app
fullScenario : Scenario ()
fullScenario = scenario do
  buyer <- getParty "Buyer"
  seller <- getParty "Seller"
  supplier <- getParty "Supplier"
  warehouse1 <- getParty "Warehouse1"
  warehouse2 <- getParty "Warehouse2"
  transportComp1 <- getParty "TransportCompany1"
  transportComp2 <- getParty "TransportCompany2"
  setupData <- setup

  -- Sending quote request
  [quoteReq1, _quoteReq2] <- submit buyer do
    qr1 <- exercise setupData.buyerRoleCid BuyerSellerRelationship_SendQuoteRequest with
                        products = [setupData.product01]
    qr2 <- exercise setupData.buyerRoleCid BuyerSellerRelationship_SendQuoteRequest with
                        products = [setupData.product02]
    return [qr1, qr2]

  -- Propagation of quote request towards supplier
  acceptedQr <- submit seller do
    accepted <- exercise quoteReq1 $ QuoteRequest_Accept "3024"
    exercise accepted QuoteRequestAccepted_SendToSupplier with
                        supplier = supplier

  -- Acceptance of invitation to supply the delivery, manual selection of product+warehouse+quantity for the quote
  (tranQuoteReqPending, [invReservationReq1, invReservationReq2],
   [transportQuoteRequestT1W1, transportQuoteRequestT1W2,
    transportQuoteRequestT2W1, transportQuoteRequestT2W2]) <-  submit supplier do
      supplyRequest <- exercise acceptedQr QuoteRequestSupplyInvitation_Accept
      -- Selection of warehouses and transport companies, sending transport requests, asking for transport quotes
      exercise supplyRequest $ SupplyRequest_StartPriceCollection [warehouse1, warehouse2] [transportComp1, transportComp2]

  -- Transport companies submit their transport quotes
  let
    transportQuoteItemT1_1 = TransportQuoteItem 25 25.0 (date 2019 Dec 3) (date 2019 Dec 7)
    transportQuoteItemT1_2 = TransportQuoteItem 50 50.0 (date 2019 Dec 5) (date 2019 Dec 8)
    transportQuoteItemT2_1 = TransportQuoteItem 50 100.0 (date 2019 Dec 4) (date 2019 Dec 7)
    transportQuoteItemT2_2 = TransportQuoteItem 100 200.0 (date 2019 Dec 7) (date 2019 Dec 8)
  transportQuoteT1W1 <- submit transportComp1 do
    exercise transportQuoteRequestT1W1 $ TransportQuoteRequest_Accept transportQuoteItemT1_1
  transportQuoteT1W2 <- submit transportComp1 do
    exercise transportQuoteRequestT1W2 $ TransportQuoteRequest_Accept transportQuoteItemT1_2
  transportQuoteT2W1 <- submit transportComp2 do
    exercise transportQuoteRequestT2W1 $ TransportQuoteRequest_Accept transportQuoteItemT2_1
  transportQuoteT2W2 <- submit transportComp2 do
    exercise transportQuoteRequestT2W2 $ TransportQuoteRequest_Accept transportQuoteItemT2_2

  -- warehouse triggers accept reservation requests
  invReservationCid1 <- submit warehouse1 do
    exercise invReservationReq1 $ InventoryQuoteRequest_Accept setupData.inventoryW1P1Cid

  invReservationCid2 <- submit warehouse2 do
    exercise invReservationReq2 $ InventoryQuoteRequest_Accept setupData.inventoryW2P1Cid

  -- After a manual signal (that means end of transport quote request period), supplier's trigger collects
  -- all the available (tranport and inventory) quotes sent in by transport companies with the inventory items
  -- and the best is chosen
  aggregatedQuotePending <- submit supplier do
    trigger <- exercise tranQuoteReqPending TransportQuoteRequestPending_ChooseTransport
    exercise trigger $
      CalculateAggregatedQuote_Proceed
        [transportQuoteT1W1, transportQuoteT1W2, transportQuoteT2W1, transportQuoteT2W2]
        [invReservationCid1, invReservationCid2]
        [setupData.inventoryW1P1Cid, setupData.inventoryW1P2Cid, setupData.inventoryW2P1Cid, setupData.inventoryW2P2Cid]

  -- Supplier sends the quote to seller (with the corresponding transport capacity lock)
  aggregatedQuoteTrigger <- submit supplier do
    exercise aggregatedQuotePending $ AggregatedQuotePending_SendQuoteToSeller

  -- This triggers seller's trigger that creates an aggregated quote containing prices without the margin, yet
  -- This is for visibility purposes, in the next step, seller adds the margin (not visible for supplier)
  quote <- submit seller do
    aggregatedQuote <- exercise aggregatedQuoteTrigger AggregatedQuoteTrigger_Execute
    quote <- exercise aggregatedQuote $ AggregatedQuote_AddMargin 0.1
    return quote

  -- Buyer accepts the quote
  order <- submit buyer do
    exercise quote QuoteForBuyer_Accept

  -- Seller start the delivery process notifying all the participants of the process
  [deliveryInstruction1, deliveryInstruction2, deliveryInstruction3] <- submit seller do
    exercise order ConfirmedOrder_StartDelivery

  passToDate $ date 2019 Dec 3

  -- Transport company asks the warehouse for pickup acknowledgement
  pickUpReq1 <- submit transportComp1 do
    exercise deliveryInstruction1 DeliveryInstruction_PickUp

  passToDate $ date 2019 Dec 4

  pickUpReq2 <- submit transportComp2 do
    exercise deliveryInstruction2 DeliveryInstruction_PickUp

  passToDate $ date 2019 Dec 5

  pickUpReq3 <- submit transportComp1 do
    exercise deliveryInstruction3 DeliveryInstruction_PickUp

  -- Warehouse acknowledges the pickup and lets the transport companies to transport the products
  (transportPending1, transportPending2) <- submit warehouse1 do
    d1 <- exercise pickUpReq1 PickUpRequest_Accept
    d2 <- exercise pickUpReq2 PickUpRequest_Accept
    return (d1, d2)

  transportPending3 <- submit warehouse2 do
    exercise pickUpReq3 PickUpRequest_Accept

  -- Transportation happens
  (delivery1, delivery3) <- submit transportComp1 do
    d1 <- exercise transportPending1 TransportPending_Deliver
    d3 <- exercise transportPending3 TransportPending_Deliver
    return (d1, d3)

  delivery2 <- submit transportComp2 do
    exercise transportPending2 TransportPending_Deliver

  passToDate $ date 2019 Dec 7

  -- Buyer ackowledges delivery and pays
  (deliveryComplete1, deliveryComplete2) <- submit buyer do
    dc1 <- exercise delivery1 Delivery_Acknowledge
    dc2 <- exercise delivery2 Delivery_Acknowledge
    return (dc1, dc2)

  passToDate $ date 2019 Dec 8

  deliveryComplete3 <- submit buyer do
    exercise delivery3 Delivery_Acknowledge

  -- Transport company acknowledges delivery as well finishing it and releasing capacity
  (deliveryPayment1, deliveryPayment2, deliveryPayment3) <- submit seller do
    (deliveryPayment1, buyerSellerObligationCid1) <- exercise deliveryComplete1 DeliveryComplete_Accept
    (deliveryPayment2, buyerSellerObligationCid2) <- exercise deliveryComplete2 DeliveryComplete_Accept
    (deliveryPayment3, buyerSellerObligationCid3) <- exercise deliveryComplete3 DeliveryComplete_Accept
    buyerSellerObligation1 <- fetch buyerSellerObligationCid1
    buyerSellerObligation2 <- fetch buyerSellerObligationCid2
    buyerSellerObligation3 <- fetch buyerSellerObligationCid3
    buyerSellerObligation1.price === 1540.0
    buyerSellerObligation2.price === 1567.5
    buyerSellerObligation3.price === 3245.0
    return (deliveryPayment1, deliveryPayment2, deliveryPayment3)

  -- TODO: Ask whether it is OK to release transport capacity lock after payment
  submit supplier do
    (deliverySupplierPayment1, sellerSupplierObligationCid1) <- exercise deliveryPayment1 DeliveryPayment_Accept
    (deliverySupplierPayment2, sellerSupplierObligationCid2) <- exercise deliveryPayment2 DeliveryPayment_Accept
    (deliverySupplierPayment3, sellerSupplierObligationCid3) <- exercise deliveryPayment3 DeliveryPayment_Accept
    (supplierWarehouseObligationCid1, _) <- exercise deliverySupplierPayment1 DeliverySupplierPayment_Pay
    (supplierWarehouseObligationCid2, _) <- exercise deliverySupplierPayment2 DeliverySupplierPayment_Pay
    (supplierWarehouseObligationCid3, supplierTransportObligationCid3) <- exercise deliverySupplierPayment3 DeliverySupplierPayment_Pay
    sellerSupplierObligation1 <- fetch sellerSupplierObligationCid1
    sellerSupplierObligation2 <- fetch sellerSupplierObligationCid2
    sellerSupplierObligation3 <- fetch sellerSupplierObligationCid3
    supplierWarehouseObligation3 <- fetch supplierWarehouseObligationCid3
    supplierTransportObligation3 <- fetch supplierTransportObligationCid3
    -- TODO: Insert real numbers
    sellerSupplierObligation1.price === 1400.0
    sellerSupplierObligation2.price === 1425.0
    sellerSupplierObligation3.price === 2950.0
    supplierWarehouseObligation3.price === 2900.0
    supplierTransportObligation3.price === 50.0
