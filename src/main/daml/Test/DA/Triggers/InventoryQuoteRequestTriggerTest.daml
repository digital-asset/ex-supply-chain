--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module Test.DA.Triggers.InventoryQuoteRequestTriggerTest where

import Daml.Trigger.Assert
import DA.Assert
import DA.Date
import DA.Foldable hiding (length)

import DA.RefApps.SupplyChain.Inventory
import DA.RefApps.SupplyChain.QuoteRequest
import DA.RefApps.SupplyChain.Triggers.InventoryQuoteRequestTrigger
import DA.RefApps.SupplyChain.Types

import Test.DA.Triggers.TriggerTestUtils

requestWithMatchingItemsAreAllAcceptedTest: Scenario ()
requestWithMatchingItemsAreAllAcceptedTest = scenario do
  party <- getParty "party"
  -- item1 is intentionally missing
  item2 <- submit party do create $ createItem party "Product 2"
  item3 <- submit party do create $ createItem party "Product 3"
  request1 <- submit party do create $ createRequest party "Product 1"
  request2 <- submit party do create $ createRequest party "Product 2"
  request3 <- submit party do create $ createRequest party "Product 3"
  let acs = foldMap toACS [request1, request2, request3]
         <> foldMap toACS [item2, item3]

  commands <- testTrigger trigger party acs

  length commands === 2
  let expectedChoice2 = InventoryQuoteRequestBotTrigger_Accept with inventoryItemCid = item2
  assertExerciseCmd commands $ \(cid, actualChoice) -> do
    request2 === cid
    expectedChoice2 === actualChoice
  let expectedChoice3 = InventoryQuoteRequestBotTrigger_Accept with inventoryItemCid = item3
  assertExerciseCmd commands $ \(cid, actualChoice) -> do
    request3 === cid
    expectedChoice3 === actualChoice

matchesChecksBothProductnameAndWarehouseTest : Scenario ()
matchesChecksBothProductnameAndWarehouseTest = scenario do
  warehouse1 <- getParty "Warehouse1"
  warehouse2 <- getParty "Warehouse2"
  let productName1 = "Product 1"
  let productName2 = "Product 2"
  let request11 = createRequest warehouse1 productName1
  True === matches (createItem warehouse1 productName1) request11
  False === matches (createItem warehouse2 productName1) request11
  False === matches (createItem warehouse1 productName2) request11
  False === matches (createItem warehouse2 productName2) request11

itemMatchingRetrievesTest : Scenario ()
itemMatchingRetrievesTest = scenario do
  party <- getParty "Warehouse1"
  let productName1 = "Product 1"
  let productName2 = "Product 2"
  dummyCid <- submit party do create $ createItem party productName1
  let request = createRequest party productName1
  let items =
        [ (dummyCid, createItem party productName2)
        , (dummyCid, createItem party productName1)]
  Some (dummyCid, createItem party productName1) === itemMatching request items

itemMatchingReturnsNoneTest : Scenario ()
itemMatchingReturnsNoneTest = scenario do
  party <- getParty "Warehouse1"
  let productName1 = "Product 1"
  let productName2 = "Product 2"
  dummyCid <- submit party do create $ createItem party productName1
  let request = createRequest party productName1
  let items = [ (dummyCid, createItem party productName2) ]
  None === itemMatching request items

createRequest : Party -> Text -> InventoryQuoteRequestBotTrigger
createRequest party productName = do
  let sampleDate = date 1970 Jan 1
  let product = OrderedProduct productName 0 sampleDate sampleDate
  InventoryQuoteRequestBotTrigger with
        workflowId = ""
        warehouse = party
        supplier = party
        product

createItem : Party -> Text -> InventoryItem
createItem party productName =
  InventoryItem with
    warehouse = party
    supplier = party
    productName = productName
    quantity = 0
    unitPrice = 0.0
